{"version":3,"sources":["components/Polaroid/Polaroid.jsx","components/Polaroid/index.js","components/PolaroidList/PolaroidList.jsx","components/PolaroidList/index.js","App.js","serviceWorker.js","index.js"],"names":["Polaroid","props","inner","useState","turnLeft","setTurnleft","classNames","setClassNames","useEffect","children","text","className","onClick","shakeIt","call","src","url","alt","PolaroidList","list","map","item","i","key","App","moveMove","console","log","polaroidList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAqCeA,ICpCAA,EDOf,SAAkBC,GAAQ,IAMpBC,EANmB,EACSC,oBAAS,GADlB,mBAChBC,EADgB,KACNC,EADM,OAEaF,mBAASC,EAAW,OAAS,SAF1C,mBAEhBE,EAFgB,KAEJC,EAFI,KAqBvB,OAjBAC,qBAAU,kBAAMD,EAAcH,EAAW,OAAS,WAAU,CAACA,IAK3DF,EADED,EAAMQ,SACAR,EAAMQ,SAEN,4BAAKR,EAAMS,MAWnB,yBAAKC,UAAW,YAAcL,EAAYM,QAR5C,WACEP,GAAaD,GACTH,EAAMY,SAAWZ,EAAMY,QAAQC,MACjCb,EAAMY,YAMN,yBAAKE,IAAKd,EAAMe,IAAKC,IAAKhB,EAAMS,OAC/BR,IEhBQgB,ICfAA,EDKf,SAAsBjB,GACpB,OACE,yBAAKU,UAAU,iBACZV,EAAMkB,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACd,kBAAC,EAAD,CAAUC,IAAKD,EAAGN,IAAKK,EAAKL,IAAKN,KAAMW,EAAKX,KAAMG,QAASQ,EAAKR,eE0BzDW,MAhCf,WACE,SAASC,IACPC,QAAQC,IAAI,+BACZD,QAAQC,IAAI,gEAGd,IAAIC,EAAe,CACjB,CACEZ,IAAK,4vBACLN,KAAM,YACNG,QAASY,GAEX,CACET,IAAK,4vBACLN,KAAM,aAER,CACEM,IAAK,4vBACLN,KAAM,YACNG,QAASY,IAIb,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAcQ,KAAMS,OClBRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.575c35d5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Polaroid.css\";\r\n\r\n/**\r\n * @param {string} url - Polaroid image url\r\n * @param {string} text - Polaroid legend and alt text.\r\n * @param {function} shakeIt - Polaroid event.\r\n */\r\nfunction Polaroid(props) {\r\n  const [turnLeft, setTurnleft] = useState(true);\r\n  const [classNames, setClassNames] = useState(turnLeft ? \"left\" : \"right\");\r\n\r\n  useEffect(() => setClassNames(turnLeft ? \"left\" : \"right\"), [turnLeft]);\r\n\r\n  let inner;\r\n\r\n  if (props.children) {\r\n    inner = props.children;\r\n  } else {\r\n    inner = <h3>{props.text}</h3>;\r\n  }\r\n\r\n  function handleClick() {\r\n    setTurnleft(!turnLeft);\r\n    if (props.shakeIt && props.shakeIt.call) {\r\n      props.shakeIt();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={\"polaroid \" + classNames} onClick={handleClick}>\r\n      <img src={props.url} alt={props.text}></img>\r\n      {inner}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Polaroid;  ","import Polaroid from './Polaroid';\r\nexport default Polaroid; ","import React from \"react\";\r\nimport Polaroid from \"../Polaroid\";\r\n\r\n/**\r\n * @param {[]} List - Polaroid Array of {url:string, text:string, shakeIt:function }\r\n */\r\nfunction PolaroidList(props) {\r\n  return (\r\n    <div className=\"polaroid_list\">\r\n      {props.list.map((item, i) => (\r\n        <Polaroid key={i} url={item.url} text={item.text} shakeIt={item.shakeIt} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PolaroidList;","import PolaroidList from './PolaroidList';\r\nexport default PolaroidList; ","import React from \"react\";\nimport \"./App.css\";\nimport PolaroidList from \"./components/PolaroidList\";\n\nfunction App() {\n  function moveMove() {\n    console.log(\"I like to move it, move it!\");\n    console.log(\"⊂(▀¯▀⊂)⊂(▀¯▀⊂)\");\n  }\n\n  let polaroidList = [\n    {\n      url: \"https://lh3.googleusercontent.com/wOOJB10spwcAPXb59WfuICwaDFcGHX74gadw17JcQJWfAZFHX8Up8UMueMFW7wN-L6BhdEij8IGKzpXE8J2Cs3SJl7AFMv-fuOEPv2FSXm2OuIWCiXZ5DK1lLQCZlDJSDonWS_mnTEAXuQmq9e6QDAFwKB4VQWKwHvdfrnuM3eq16xlCr-U4ZgWde1Tm0EMBdhAGxiWUaCBV9y5ZQx59AyamjW5_PIVgUBshDc1e1f6_EKinQFvm3NTaZ_pOKhgWLke2LJUe0BL2x1yifoEBVw2C973szXjxAtqqd--XEsjslBlelSqu2ttBsZ1M4tOfoCF334lp8ttQLloPS6MQaJ7HonL-g5vtldpWxRJqmihte_75D3J9BYY5rjvCAdU9F6MOHkW0-Ehu77FdivWVkroD7fILCoXIjbKogDVhgDoP37o_qbt4JgeDMi5k4ykLTo_17hVgySVSXHV23O3EJ30idKwkgiNEgtX0QTGrNwd1dnFeYKLP-kPi3Rp-6lcJzqB1rKD4f51q3vVPRV6poHH1SL8sfxlFJwzqmWl5xlKI5a_Q5QotUVY5e_AuaodB58l0BEXfdAZqTd2XOvD88KtF3gYwtKxIxT-h8GzDaggzj6n0FNO5OcxA0vs6wUoLHPSt0dFRStmyqHwN7pfsCC-2chOHk0_eiTjiozjquP4DZDPctyCWB0NGR08JZN8=w842-h625-no?authuser=0\",\n      text: \"Brotas-sp\",\n      shakeIt: moveMove,\n    },\n    {\n      url: \"https://lh3.googleusercontent.com/PZR3mmcoXa7K26G2yJFLtbKhO1c_SZ3oovoGCcvyTw7VTKFEoFL3et5j6RRDlbb8_flgzFVU9MJhmPhE1P71FAUl5aXWoYPQm_oPAM1Hsn1wp6bbrgLLfSUQDBkx763mAEvJcqiis31z9MettT18SLZz9Y5Y4ooyTkxtpgQ6aLpZQ1h_G3SAPG7DKkXc_YPyJsRrOvivPy5jIhwCRTp3duR6pjpgwNWTgEIsJXuFWuAxX1Qv0T0e28ADhnzYDZ5UKaTgxKAuXdgEGnl8FlOHI2vzMhFDbI0mvKccWic7W0ixuRMIU7lj7PEOVEGNS4buBWyhigCuByG7VOmjkHxXk_K-o4gRd_iKABPVHZO0aymF9XTgMoA8FyLWGT5ewBnGf66NQrihkLU6YHhNZtX-elA53ZkRXXr1ALwlk3QUrxXECFAjEJ3Cc7HODmmtDwTscNVe8DkuWuO-HBwKmsbGHXcK-SrM5wJakdYRBlsKiNoADYoRS91mel_CFudaKkz9oDhhKU8BfhaoowPm2MAq1CBlLzv-v-iVDGzsSATyqC15oS1C0ObMT7tX9X9g2a7zdYap8NnRPCkazzR26GcL1s81pksx-hZdzOo7Hcn_pRMaSev6OZ1GY78-ysCC695UlamhfF3alfpApW3Ql_0JjIRP-2G4KBalc87DXGuLyC3_DgkIMlSz1TGeQ2uVFso=w286-h213-no?authuser=0\",\n      text: \"Brotas-sp\",\n    },\n    {\n      url: \"https://lh3.googleusercontent.com/5ZURqmHXYdQi_bJFJtRE3ndPtIQf3X3vey_W0wO7eNX2jZ61U-ffWV2K_9KC7L1Gk8GrwWCFB0Q29_cfO_wrmdZjZNif8JYHBCkvFl2TuXE6Zm14fBslsWnAOhysK2KwJm8N9o6jObcXS48O2JFoCu8BXe1GkodXf-AE7j8N4ZxWKzeO_wrxgTdBdfFXoRELWmS22SWbdwK_fyudxhPhTiDe_iaUiXONv2NXgCjZ71XznmFwlMXe-uKSZ1k0IMLGWlLDqTO3qcGK0lXLyy2p_-kkw-PqQh2Trj4TQSNLZuwHqOy87mgJr8pZf9_FI06cnHBI5bhIygFo_m2DufJQsskz3Q7hqeP39Xa4gW0U1uyc5bbvKoKkrtocS8uE9kDRsfNpECo9psIsN57mg-gabhFvo27ygzX3h6q_4CKuEyU3s7WhNuy_QBzeNVdLz9e9WPNv71lTBnyzq92RNz-JEMUBu4qkBekodr-TGAEdZiuSucxEntTRH9VSQSrhM3U2Hqpob1LeqGmtGpMiqw5CO5LWNfRKHlwxSgDJV91HxuIzG50--HSfttKLwLGo1Zh5KI0aNmcANE8cm9WFGWe9Co9oCnkQ18_asxFNqD24SQ1WeM0e5AHq-x74Ugye6Dkfy32ppvdrOgDvHvKCV3av9-OEZIw3R11wBRNUECA6mQ8RRU48npliFaBO9nXEeRQ=w842-h625-no?authuser=0\",\n      text: \"Brotas-sp\",\n      shakeIt: moveMove,\n    },\n  ];\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <PolaroidList list={polaroidList} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}